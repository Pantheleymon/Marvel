{"version":3,"file":"static/js/716.236b589b.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/pages/SingleComicPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"error\"/>\n    )\n}\n\nexport default ErrorMessage;","import { Link, useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport useMarvelService from '../../services/MarvelService';\n\nimport './singleComicPage.scss';\n\nconst SingleComicPage = () => {\n\n    const {comicId} = useParams();\n    const [comic, setComic] = useState(null);\n    const {loading, error, getComic, clearError} = useMarvelService();\n\n\n    useEffect(() => {\n        updateComic();\n    }, [comicId])\n\n    const updateComic = () => {\n        clearError();\n        getComic(comicId)\n            .then(onComicLoaded)\n    }\n\n    const onComicLoaded = (comic) => {\n        setComic(comic);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !comic) ? <View comic={comic} /> : null;\n\n    return (\n        <>\n            {errorMessage}\n            {spinner}\n            {content}\n        </>\n    )\n}\n\nconst View = ({comic}) => {\n    const {title, description, pageCount, thumbnail, language, price} = comic;\n    \n    return (\n        <div className=\"single-comic\">\n            <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\n            <div className=\"single-comic__info\">\n                <h2 className=\"single-comic__name\">{title}</h2>\n                <p className=\"single-comic__descr\">{description}</p>\n                <p className=\"single-comic__descr\">{pageCount}</p>\n                <p className=\"single-comic__descr\">Language: {language}</p>\n                <div className=\"single-comic__price\">{price}</div>\n            </div>\n            <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\n        </div>\n    )\n}\n\nexport default SingleComicPage;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback( async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            setLoading(false);\n            return data;\n\n        } catch(e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n\n    }, [])\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, request, error, clearError}\n}","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n\tconst { loading, request, error, clearError } = useHttp();\n\n\tconst _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n\tconst _apiKey = \"apikey=c5d6fc8b83116d92ed468ce36bac6c62\";\n\tconst _baseOffset = 210;\n\n\tconst getAllCharacters = async (offset = _baseOffset) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n\tconst getCharacter = async (id) => {\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n\t\treturn _transformCharacter(res.data.results[0]);\n\t};\n\n\tconst getAllComics = async (offset = 0) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformComics);\n\t};\n\n\tconst getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n\tconst _transformCharacter = (char) => {\n\t\treturn {\n\t\t\tid: char.id,\n\t\t\tname: char.name,\n\t\t\tdescription: char.description\n\t\t\t\t? `${char.description.slice(0, 210)}...`\n\t\t\t\t: \"There is no description for this character\",\n\t\t\tthumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n\t\t\thomepage: char.urls[0].url,\n\t\t\twiki: char.urls[1].url,\n\t\t\tcomics: char.comics.items,\n\t\t};\n\t};\n\n\tconst _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n\t\t\tprice: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n\t\t};\n\t};\n\n\treturn {\n\t\tloading,\n\t\terror,\n\t\tclearError,\n\t\tgetAllCharacters,\n\t\tgetCharacter,\n\t\tgetAllComics,\n\t\tgetComic,\n\t};\n};\n\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","comic","title","description","pageCount","thumbnail","language","price","_jsxs","className","children","Link","to","SingleComicPage","comicId","useParams","setComic","useState","loading","error","getComic","clearError","useMarvelService","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","Spinner","content","_Fragment","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","id","name","slice","path","extension","homepage","urls","wiki","comics","items","_transformComics","_comics$textObjects$","textObjects","prices","getAllCharacters","offset","results","map","getCharacter","res","getAllComics"],"sourceRoot":""}