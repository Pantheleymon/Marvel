{"version":3,"file":"static/js/635.900e290e.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt=\"error\"/>\n    )\n}\n\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\n\nimport Spinner from '../spinner/Spinner'\nimport ErrorMessage from '../errorMessage/ErrorMessage'\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() =>{ \n        updateChar();\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then (onCharLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return(\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    const [selectedCharId, setSelectedCharId] = useState(null);\n    \n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(()=> {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded);\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(setNewItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const onSelectChar = (id) => {\n        setSelectedCharId(id);\n        props.onCharSelected(id);\n        props.charInfoFocus();\n    }\n\n    function renderItems(arr, id) {\n        const items =  arr.map((item) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"alert\">\n                    <li \n                        className={item.id === id ? \"char__item char__item_selected\" : \"char__item\"}\n                        onClick={() => onSelectChar(item.id)}\n                        onKeyDown={(event) => event.code === \"Enter\" || event.code === \"Space\" ? onSelectChar(item.id) : ''}\n                        tabIndex=\"0\">\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    \n    const items = renderItems(charList, selectedCharId);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n    const skeleton = char || loading || error ? null : <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\" ref={props.charInfoRef} tabIndex='0'>\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n    return (\n        <>\n            <div className=\"char__basics\">\n            <img src={thumbnail} alt={name} style={imgStyle}/>\n            <div>\n                <div className=\"char__info-name\">{name}</div>\n                <div className=\"char__btns\">\n                    <a href={homepage} target=\"_blank\" rel='noreferrer' className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} target=\"_blank\" rel='noreferrer' className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n        <div className=\"char__descr\">\n            {description}\n        </div>\n        <div className=\"char__comics\">Comics:</div>\n        <ul className=\"char__comics-list\">\n            {comics.length > 0 ? null : 'There is no comics with this character'}\n            {\n                // eslint-disable-next-line\n                comics.map((item, i) => {\n                    if (i <= 9) {\n                        let comicId = item.resourceURI.slice(item.resourceURI.lastIndexOf('/') + 1);\n                        return (\n                            <Link to={`/comics/${comicId}`} className=\"char__comics-item\" key={i}>\n                                <li>\n                                    {item.name}\n                                </li>\n                            </Link>\n                        )\n                    }\n                })\n            }\n\n        </ul>\n        </>\n    )\n}\n\nexport default CharInfo;","import {useState} from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport {Link} from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n    const results = !char ? null : char.length > 0 ?\n                    <div className=\"char__search-wrapper\">\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                            <div className=\"inner\">To page</div>\n                        </Link>\n                    </div> : \n                    <div className=\"char__search-error\">\n                        The character was not found. Check the name and try again\n                    </div>;\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues = {{\n                    charName: ''\n                }}\n                validationSchema = {Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit = { ({charName}) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field \n                            id=\"charName\" \n                            name='charName' \n                            type='text' \n                            placeholder=\"Enter name\"/>\n                        <button \n                            type='submit' \n                            className=\"button button__main\"\n                            disabled={loading}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n                </Form>\n            </Formik>\n            {results}\n            {errorMessage}\n        </div>\n    )\n}\n\nexport default CharSearchForm;","import { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if (this.state.error) {\n            return <h2>Something went wrong</h2>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary","import { useState, useRef } from \"react\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nconst MainPage = () => {\n\n    const [selectedChar, setChar] = useState(null)\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    }\n\n    const charInfoRef = useRef(null);\n\n    function charInfoFocus() {\n        charInfoRef.current && charInfoRef.current.focus()\n    }\n\n    return (\n        <>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected} \n                                charId={selectedChar}\n                                charInfoFocus={charInfoFocus}\n                                />\n                </ErrorBoundary>\n\n                <div>\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar} charInfoRef={charInfoRef}/>\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharSearchForm/>\n                    </ErrorBoundary>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default MainPage;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback( async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            setLoading(false);\n            return data;\n\n        } catch(e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n\n    }, [])\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, request, error, clearError}\n}","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n\tconst { loading, request, error, clearError } = useHttp();\n\n\tconst _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n\tconst _apiKey = \"apikey=c5d6fc8b83116d92ed468ce36bac6c62\";\n\tconst _baseOffset = 210;\n\n\tconst getAllCharacters = async (offset = _baseOffset) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n\tconst getCharacter = async (id) => {\n\t\tconst res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n\t\treturn _transformCharacter(res.data.results[0]);\n\t};\n\n\tconst getCharacterByName = async (name) => {\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n\tconst getAllComics = async (offset = 0) => {\n\t\tconst res = await request(\n\t\t\t`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n\t\t);\n\t\treturn res.data.results.map(_transformComics);\n\t};\n\n\tconst getComic = async (id) => {\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n\t\treturn _transformComics(res.data.results[0]);\n\t};\n\n\tconst _transformCharacter = (char) => {\n\t\treturn {\n\t\t\tid: char.id,\n\t\t\tname: char.name,\n\t\t\tdescription: char.description\n\t\t\t\t? `${char.description.slice(0, 210)}...`\n\t\t\t\t: \"There is no description for this character\",\n\t\t\tthumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n\t\t\thomepage: char.urls[0].url,\n\t\t\twiki: char.urls[1].url,\n\t\t\tcomics: char.comics.items,\n\t\t};\n\t};\n\n\tconst _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} p.`\n\t\t\t\t: \"No information about the number of pages\",\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n\t\t\tprice: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n\t\t};\n\t};\n\n\treturn {\n\t\tloading,\n\t\terror,\n\t\tclearError,\n\t\tgetAllCharacters,\n\t\tgetCharacter,\n\t\tgetCharacterByName,\n\t\tgetAllComics,\n\t\tgetComic,\n\t};\n};\n\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","RandomChar","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","selectedCharId","setSelectedCharId","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","onSelectChar","onCharSelected","charInfoFocus","items","arr","map","item","CSSTransition","timeout","classNames","onKeyDown","event","code","tabIndex","TransitionGroup","component","renderItems","disabled","Skeleton","_Fragment","comics","target","rel","i","comicId","resourceURI","slice","lastIndexOf","Link","to","concat","charId","skeleton","ref","charInfoRef","CharSearchForm","getCharacterByName","results","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","useRef","CharList","current","focus","CharInfo","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","res","getAllComics","getComic"],"sourceRoot":""}